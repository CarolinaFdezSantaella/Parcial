/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for chess game logs and user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/game_logs/{gameLogId}: Stores individual chess game logs for each user.
 *
 * Key Security Decisions:
 * - Users can only create their own profile and manage their own game logs.
 * - No user listing is allowed.
 * - Data for game logs is nested under the user's document ID, simplifying authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, enforcing ownership.
     * @path /users/{userId}
     * @allow (create) - User 'IkMgdGxh22SzMgsk5bzvdN862no2' can create their profile if request.auth.uid == userId.
     * @deny (create) - User 'someoneElse' cannot create a profile for 'IkMgdGxh22SzMgsk5bzvdN862no2'.
     * @allow (get) - User 'IkMgdGxh22SzMgsk5bzvdN862no2' can get their profile.
     * @deny (get) - User 'someoneElse' cannot get user 'IkMgdGxh22SzMgsk5bzvdN862no2' profile.
     * @allow (update) - User 'IkMgdGxh22SzMgsk5bzvdN862no2' can update their profile.
     * @deny (update) - User 'someoneElse' cannot update user 'IkMgdGxh22SzMgsk5bzvdN862no2' profile.
     * @allow (delete) - User 'IkMgdGxh22SzMgsk5bzvdN862no2' can delete their profile.
     * @deny (delete) - User 'someoneElse' cannot delete user 'IkMgdGxh22SzMgsk5bzvdN862no2' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure chess game logs, enforcing ownership.
     * @path /users/{userId}/game_logs/{gameLogId}
     * @allow (create) - User 'IkMgdGxh22SzMgsk5bzvdN862no2' can create a game log under their profile.
     * @deny (create) - User 'someoneElse' cannot create a game log for user 'IkMgdGxh22SzMgsk5bzvdN862no2'.
     * @allow (get) - User 'IkMgdGxh22SzMgsk5bzvdN862no2' can get their game log.
     * @deny (get) - User 'someoneElse' cannot get user 'IkMgdGxh22SzMgsk5bzvdN862no2' game log.
     * @allow (update) - User 'IkMgdGxh22SzMgsk5bzvdN862no2' can update their game log.
     * @deny (update) - User 'someoneElse' cannot update user 'IkMgdGxh22SzMgsk5bzvdN862no2' game log.
     * @allow (delete) - User 'IkMgdGxh22SzMgsk5bzvdN862no2' can delete their game log.
     * @deny (delete) - User 'someoneElse' cannot delete user 'IkMgdGxh22SzMgsk5bzvdN862no2' game log.
     * @principle Enforces document ownership for writes; allows owner-only reads.
     */
    match /users/{userId}/game_logs/{gameLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}